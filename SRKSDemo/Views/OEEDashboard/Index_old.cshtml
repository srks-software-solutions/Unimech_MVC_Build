@{
	Layout = "~/Views/Shared/Layoutmimics.cshtml";

	var CellWiseWCOEEVals = ViewData["CellWiseWCOEEVals"];
	dynamic CellWiseWCOEEWCNames = ViewData["CellWiseWCOEEWCNames"];
	int cnt = 0;
	int Scnt = 0;
	var a = ViewBag.Aval;
	var b = ViewBag.Avall;
}
<!-- Styles -->
@*For Color Codes*@
<style>
	div.parent {
		border: 2px solid red;
		width: 100%;
		color: blue;
		border: none;
		height: auto;
	}

	div.childcolor {
		width: 20%;
		height: 90%;
		float: right;
		-webkit-text-size-adjust: 100%;
		display: inline;
		margin-left: 1vw;
		text-align: right;
		border-radius: 10px;
	}

	div.childtext {
		width: 70%;
		height: 90%;
		float: right;
		-webkit-text-size-adjust: 100%;
		font-size: .8vw;
		color: black;
		display: inline;
		text-align: left;
		/*margin-right: 1vw;
		border-radius: 10px;*/
		font-family: Calibri;
		font-style: oblique;
		font-weight: bold;
	}

	table {
		width: 100%;
	}

	td {
		width: 25%;
	}
</style>


<style>
	.chartOEENStuff {
		width: 20%;
		height: 300px;
		margin: auto;
		display: inline;
		float: left;
	}

	.chartLossNStuff {
		width: 22%;
		height: 300px;
		margin: auto;
		display: inline;
		float: left;
	}

	.chartBarOEENStuff {
		width: 22%;
		height: 300px;
		margin: auto;
		display: inline;
		float: left;
	}

	.chartBarOEENStuff1 {
		width: 22%;
		height: 300px;
		margin: auto;
		display: inline;
		float: left;
	}

	.chartBarLossOverallNStuff {
		width: 40%;
		height: 300px;
		margin: auto;
	}


	.c3-line {
		stroke-width: 5px;
	}

	.c3-circle {
		fill: red !important;
	}


	.chartdiv {
		width: 50%;
		height: 300px;
		margin: auto;
		float: right;
	}

	.c3-legend-item {
		font-size: 1em;
	}

	.floatingDiv {
		margin: 3px 3px 3px 3px;
		/*z-index: 6000;*/
		width: 3%;
		display: inline;
		margin-left: 1%;
		font-size: large;
		font-weight: 700;
		position: relative;
		float: left;
	}
</style>

@{
	List<SelectListItem> SummerizeAs = new List<SelectListItem>();
	SummerizeAs.Add(new SelectListItem
	{
		Text = "Plant",
		Value = "Plant",
	});
	SummerizeAs.Add(new SelectListItem
	{
		Text = "Shop",
		Value = "Shop",
	});
	SummerizeAs.Add(new SelectListItem
	{
		Text = "Cell",
		Value = "Cell",
	});
	SummerizeAs.Add(new SelectListItem
	{
		Text = "WorkCentre",
		Value = "WorkCentre",
	});
}

@using (Html.BeginForm())
{
	<div class="wrp clearfix" style="background-color: white">
		<div class="fluid">
			<div class="row">
				<div class="widget grid12">
					<div class="widget-content pad20f">
						<label for="input-1" class="stacked-label" style="resize: horizontal; width: 15%; margin-left: 1%; color: blue; font-style: oblique">Plant Name</label>
						<label for="input-1" class="stacked-label" style="resize: horizontal; margin-left: 1%; width: 15%; color: blue; font-style: oblique">Shop Name</label>
						<label for="input-1" class="stacked-label" style="resize: horizontal; width: 15%; margin-left: 1%; color: blue; font-style: oblique">Cell Name</label>
						<label for="input-1" class="stacked-label" style="resize: horizontal; margin-left: 1%; width: 15%; color: blue; font-style: oblique">WorkCenter Name</label>
						<label for="input-1" class="stacked-label" style="resize: horizontal; width: 15%; margin-left: 1%; color: blue; font-style: oblique">Start Date</label>
						<label for="input-1" class="stacked-label" style="resize: horizontal; margin-left: 1%; width: 15%; color: blue; font-style: oblique">End Date</label>

						<br />
						@*@Html.DropDownListFor(model => model.PlantID, ViewBag.Plant as IEnumerable<SelectListItem>, "--Select Plant--", new { @id = "PlantID", @class = "stacked-label", @name = "PlantID", @required = "required", @style = "margin-left: 2%;aria-expanded:false;width:20%" })*@
						@Html.DropDownList("PlantID", null, "--Select Plant--", new { @id = "PlantID", @class = "stacked-label dropdown-toggle", @name = "PlantID", @style = "margin-left: 1%;aria-expanded:false;width:15%", @value = ViewData["PlantID"], @Required = "required" })

						@*//@Html.DropDownListFor(model => model.ShopID, ViewBag.Shop as IEnumerable<SelectListItem>, "--Select Shop--", new { @id = "ShopID", @class = "stacked-label", @name = "ShopID", @style = "margin-left: 2%;aria-expanded:false;width:20%" })*@
						@Html.DropDownList("ShopID", null, "--Select Shop--", new { @id = "ShopID", @class = "stacked-label", @name = "ShopID", @style = "margin-left: 1%;aria-expanded:false;width:15%", @value = ViewData["ShopID"], @Required = "required" })

						@*//@Html.DropDownListFor(model => model.CellID, ViewBag.Cell as IEnumerable<SelectListItem>, "--Select Cell--", new { @id = "CellID", @class = "stacked-label", @name = "CellID", @style = "margin-left: 2%;aria-expanded:false;width:20%" })*@
						@Html.DropDownList("CellID", null, "--Select Cell--", new { @id = "CellID", @class = "stacked-label", @name = "CellID", @style = "margin-left: 1%;aria-expanded:false;width:15%", @value = ViewData["CellID"] })

						@*@Html.DropDownListFor(model => model.WorkCenterID, ViewBag.WorkCenter as IEnumerable<SelectListItem>, "--Select WorkCenter--", new { @id = "WorkCenterID", @class = "stacked-label", @name = "WorkCenterID", @style = "margin-left: 2%;aria-expanded:false;width:20%" })*@
						@Html.DropDownList("WorkCenterID", null, "--Select WC--", new { @id = "WorkCenterID", @class = "stacked-label", @name = "WorkCenterID", @style = "margin-left: 1%;aria-expanded:false;width:15%", @value = ViewData["WorkCenterID"] })

						@* @Html.TextBox(" ", null, new { @id = "StartDate", @name = "StartDate", @placeholder = "Start Date", @class = "stacked-label fdate", @required = "required", @style = "margin-left: 1%;aria-expanded:false;width:15%" })
							@Html.TextBox(" ", null, new { @id = "EndDate", @name = "EndDate", @placeholder = "End Date", @class = "stacked-label fdate", @required = "required", @style = "margin-left: 1%;aria-expanded:false;width:15%" })*@

						<input type="text" id="StartDate" name="StartDate" placeholder="Start Date" class="stacked-label fdate" style="margin-left: 1%; width: 15%" readonly="readonly" />
						<input type="text" id="EndDate" name="EndDate" placeholder="End Date" class="stacked-label fdate" style="margin-left: 1%; width: 15%" readonly="readonly" />
						<br />

						@* <label for="input-1" class="stacked-label" style="resize: horizontal; padding-top: 1%; margin-left: 1%; width: 15%; color: blue; font-style: oblique">Summarize Based on</label>
							@Html.DropDownList("SummarizeAs", SummerizeAs, new { @id = "SummarizeAs", @class = "stacked-label", @name = "SummarizeAs", @style = "margin-left: 1%;aria-expanded:false;width:15%", @value = ViewData["SummarizeAs"] })*@

						<input type="submit" value="Today" id="Today" name="ButtonClicked" class="TGSBSubmit stacked-label btn orange " style="resize: horizontal; margin-top: 1%; margin-left: 1%; width: 15%; background-color: lightgreen; color: black" />
						<input type="submit" value="GodHours" id="GodHours" name="ButtonClicked" class=" TGSBSubmit stacked-label  btn orange " style="resize: horizontal; margin-top: 1%; margin-left: 1%; width: 15%; background-color: lightgreen; color: black" />
						<input type="submit" value="ShiftPlanner" id="ShiftPlanner" name="ButtonClicked" class="TGSBSubmit stacked-label  btn orange " style="resize: horizontal; margin-top: 1%; margin-left: 1%; width: 15%; background-color: lightgreen; color: black" disabled />
						<input type="submit" value="AdjustedOEE" id="No Blue" name="ButtonClicked" class="TGSBSubmit stacked-label  btn orange " style="resize: horizontal; margin-top: 1%; margin-left: 1%; width: 15%; background-color: lightgreen; color: black" />
						<input type="hidden" id="TimingVar" name="TimingVar" value="A" />
						<input type="hidden" id="SummarizeAs" name="SummarizeAs" />
						<br />
						<span style="color: blue; font-weight: 700; font-size: large">@ViewBag.SelectedPath </span>
					</div>
				</div>
			</div>

			@*Testing MultiJson*@
			@* <div class="row">
					<div class="widget grid12 ">
						<div>OEE</div>
						<div id="chart66"></div>

					</div>
				</div>*@

			@*For OEE OverAll Guages*@
			<div class="row OEEGuage">
				<div class="widget grid12 ">
					<div class="floatingDiv">OEE</div>
					<div id="chart6" class="jchartGuageOEE chartOEENStuff"></div>
					<div class="floatingDiv">Availability</div>
					<div id="chart7" class="jchartGuageAvail chartOEENStuff"></div>
					<div class="floatingDiv">Performance</div>
					<div id="chart8" class="jchartGuagePerf chartOEENStuff"></div>
					<div class="floatingDiv">Quality</div>
					<div id="chart9" class="jchartGuageQual chartOEENStuff"></div>
				</div>
			</div>

			@*For WC Wise || Cell & WC Wise OEE Individual Bar Charts*@
			<div class="row OEEsubLevels">
				<div class="widget grid12">
					@if (@ViewBag.lowestLevel != "Shop")
					{
						<div id="designerChartLevel2OEE" class="chartBarOEENStuff1" style="margin: 1%"></div>
						<div id="designerChartLevel2Avail" class="chartBarOEENStuff1" style="margin: 1%"></div>
						<div id="designerChartLevel2Perf" class="chartBarOEENStuff1" style="margin: 1%"></div>
						<div id="designerChartLevel2Qual" class="chartBarOEENStuff1" style="margin: 1%"></div>
					}
					<div class="chartBarOEENStuffSubLevels LossesSublevels" style="margin: 1%"></div>
				</div>
			</div>

			<div class="row">
				<div class="widget grid12 jdynamicLossesElements" style="text-align: center; height: auto">
					<div id="CellWiseLossesOverAll" class="chartBarLossOverallNStuff" style="margin: 1%; padding-left: 25%"></div>
					<div class="ThisDivPurpose" style="margin: 1%; padding-left: 35%; font-weight: 900; font-size: x-large; text-align: left">Availability Losses</div>
					@if (@ViewBag.lowestLevel == "WorkCentre")
					{
						@Html.Raw(@ViewBag.ColorsAndLossCodes)
					}

				</div>
				@*This One's for Individual Lossess*@
				<div class="jdynamicLossesElements1 LossesSublevels" style="margin: 0%">
				</div>
                <div class="widget grid12 LossesSublevels" style="margin: 0%">
                    <div style="width: 100%; height: 1%">.</div>
                    @if (@ViewBag.lowestLevel == "Cell" || @ViewBag.lowestLevel == "Shop")
                    {
                        
                        @Html.Raw(@ViewBag.ColorsAndLossCodes)
                    }
                </div>
			</div>
			<!-- /row -->
		</div>
	</div>
}

<link href="~/css/jquery-ui.css" rel="stylesheet" />
<link href="~/js/D3Graphs/c3.css" rel="stylesheet" />
<script src="~/js/jquery-2.1.4.min.js"></script>
<script src="~/js/D3Graphs/d3.js"></script>
<script src="~/js/D3Graphs/c3.js"></script>
<script src="~/js/jquery-ui.js"></script>
<script src="~/js/D3Graphs/pathseg.js"></script>
<script src="~/Content1/jquery.datetimepicker.js" type="text/javascript"></script>

@*<script>
		//var jsonData = [
		//    { "name": 'www.0.com', "upload": 10 },
		//    { "name": 'www.1.com', "upload": 30 },
		//    { "name": 'www.2.com', "upload": 40 },
		//    { "name": 'www.3.com', "upload": 20 },
		//]
		//alert(jsonData)
		//var data = {};
		//var sites = [];
		//jsonData.forEach(function (e) {
		//    sites.push(e.name);
		//    //alert(e.name)
		//    data[e.name] = e.upload;
		//})
		////alert(data);
		////alert(sites);

		//var chartDonut = c3.generate({
		//    bindto: "#chart66",
		//    data: {
		//        json: [data],
		//        keys: {
		//            value: sites,
		//        },
		//        type: 'donut'
		//    },
		//})

		$(function (e) {
			//alert("Blah1")
			$.getJSON("/OEEDashboard/GetDonutData", function (data) {
				var jsonData = $.parseJSON(data);
				alert(jsonData);

				var data = {};
				var sites = [];
				jsonData.forEach(function (e) {
					sites.push(e.name);
					data[e.name] = e.upload;
				})
			   // alert(data);
				//alert(sites);

				var chartDonut = c3.generate({
					bindto: "#chart66",
					data: {
						json: [data],
						keys: {
							value: sites,
						},
						type: 'donut'
					},
				})
			});
		})
	</script>*@


<script>
	$(function () {
		var dateFormat = "dd-mm-yy",
			from = $("#StartDate")
				.datepicker({
					dateFormat: 'dd-mm-yy',
					minDate: new Date(2016, 11 - 1, 21),
					maxDate: '+50Y',
					defaultDate: "+1w",
					maxDate: "-1d",
				})
				.on("change", function () {
					to.datepicker("option", "minDate", getDate(this));
				}),
			to = $("#EndDate").datepicker({
				dateFormat: 'dd-mm-yy',
				defaultDate: "+1w",
				maxDate: "-1d",
			})
				.on("change", function () {
					from.datepicker("option", "maxDate", getDate(this));
				});
		function getDate(element) {
			var date;
			try {
				date = $.datepicker.parseDate(dateFormat, element.value);
			} catch (error) {
				date = null;
			}

			return date;
		}
	});
</script>


<script>
	$(".TGSBSubmit").on("click", function (e) {
		var TimingVarValue = $(this).val();
		$("#TimingVar").val(TimingVarValue);
		var j = $("#TimingVar").val();
		if (j != "Today" && ($("#EndDate").val() == "" || $("#StartDate").val() == "")) {
			e.preventDefault();
			alert("Please Enter Both Dates.")
		}
	})
</script>


@*Date Picker*@
<script type="text/javascript">
	//var j = jQuery.noConflict();
	//var date = new Date();
	//var currentMonth = date.getMonth();
	//var currentDate = date.getDate() - 1;
	//var currentYear = date.getFullYear();
	////alert(currentDate)
	//$(document).ready(function () {
	//    $(".fdate").datepicker({
	//        maxDate: new Date(currentYear, currentMonth, currentDate),
	//        datepicker: true,
	//        timepicker: false,
	//        dateFormat: "dd-mm-yy"
	//    });
	//});

	//to make sure startDate < endDate
	//var $j = jQuery.noConflict();
	//$j("#EndDate").datepicker().on("input change", function (e) {
	//    //console.log("Date changed: ", e.target.value);
	//    //alert($("#EndDate").val())
	//    var enddate = $("#EndDate").val();
	//    var startdate = $("#StartDate").val();
	//    if (startdate == "") {
	//        alert("Please enter StartDate First");
	//        $("#EndDate").val("");
	//    }
	//    else {
	//        var startDate = $("#StartDate").val().replace('-', '/');
	//        var endDate = $("#EndDate").val().replace('-', '/');
	//        //alert(startDate >= endDate)
	//        if (startDate <= endDate) { //donothing
	//        } else {
	//            alert("StartDate Cannot Be Greater Than EndDate");
	//            $("#EndDate").val("");
	//        }
	//    }
	//});


</script>

<script>

	$(document).ready(function (e) {
		$.getJSON("/OEEDashboard/FetchPlant", {}, function (data) {
			$("#PlantID").empty();
			$("#PlantID").append("<option value='' selected='selected' >--Select Plant--</option >");
			$.each(data, function (index, item) {
				$("#PlantID").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
			});
			$("#ShopID").empty();
			$("#ShopID").append("<option value='' selected='selected' >--Select Shop--</option >");;
			$("#CellID").empty();
			$("#CellID").append("<option value='' selected='selected' >--Select Cell--</option >");;;
			$("#WorkCenterID").empty();
			$("#WorkCenterID").append("<option value='' selected='selected' >--Select Machine--</option >");;;;
		});
	});

</script>

@*plant shop cell json*@
<script>
	//on page load
	//$(function () {
	//    var selectedID = $("#PlantID option:selected").val();
	//    if($.trim(selectedID).length > 0)
	//    {
	//        $("#ShopID").empty();
	//        $("#CellID").empty();
	//        $("#WorkCenterID").empty();
	//        var selectedID = $("#PlantID option:selected").val();
	//        $.getJSON("/EMailEscalation/GetShop", { PlantID: selectedID }, function (data) {
	//            $.each(data, function (index, item) {
	//                $("#ShopID").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
	//                //$("#CellID").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
	//            });
	//            $("#ShopID").prepend("<option value='' selected='selected'></option>");
	//            $("#WorkCenterID").prepend("<option value='' selected='selected'></option>");

	//            var dropdownVal = "Plant";
	//            $("#SummerizeAs").find('option[value=' + dropdownVal + ']').remove();
	//        });

	//        $.getJSON("/OEEDashboard/GetSummarizeDropDownValues", { Factor: "Plant" }, function (data) {
	//            $("#SummarizeAs").empty();
	//            $.each(data, function (index, item) {
	//                $("#SummarizeAs").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
	//            });
	//        });
	//    }
	//});


	$("#PlantID").on("change", function () {
		$("#ShopID").empty();
		$("#CellID").empty();
		$("#WorkCenterID").empty();
		var selectedID = $("#PlantID option:selected").val();
		$.getJSON("/OEEDashboard/FetchShop", { PlantID: selectedID }, function (data) {
			$.each(data, function (index, item) {
				$("#ShopID").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
				//$("#CellID").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
			});
			$("#ShopID").prepend("<option value='' selected='selected'></option>");
			$("#WorkCenterID").prepend("<option value='' selected='selected'></option>");

			var dropdownVal = "Plant";
			$("#SummerizeAs").find('option[value=' + dropdownVal + ']').remove();
		});

		$.getJSON("/OEEDashboard/GetSummarizeDropDownValues", { Factor: "Plant" }, function (data) {
			$("#SummarizeAs").empty();
			$.each(data, function (index, item) {
				$("#SummarizeAs").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
			});
		});
	});

	$("#ShopID").on("change", function () {
		$("#CellID").empty();
		$("#WorkCenterID").empty();
		var selectedID = $("#ShopID option:selected").val();
		$.getJSON("/OEEDashboard/Fetchcell", { ShopID: selectedID }, function (data) {
			$.each(data, function (index, item) {
				$("#CellID").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
			});
			$("#CellID").prepend("<option value='' selected='selected'></option>");
		});

		$.getJSON("/OEEDashboard/Fetch_Shop", { ShopID: selectedID }, function (data) {
			$.each(data, function (index, item) {
				$("#WorkCenterID").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
			});
			$("#WorkCenterID").prepend("<option value='' selected='selected'></option>");
		});

		$.getJSON("/OEEDashboard/GetSummarizeDropDownValues", { Factor: "Shop" }, function (data) {
			$("#SummarizeAs").empty();
			$.each(data, function (index, item) {
				$("#SummarizeAs").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
			});
		});
	});

	$("#CellID").on("change", function () {
		$("#WorkCenterID").empty();
		var selectedID = $("#CellID option:selected").val();
		$.getJSON("/OEEDashboard/FetchMachine", { CellID: selectedID }, function (data) {
			$.each(data, function (index, item) {
				$("#WorkCenterID").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
			});
			$("#WorkCenterID").prepend("<option value='' selected='selected'></option>");
		});

		$.getJSON("/OEEDashboard/GetSummarizeDropDownValues", { Factor: "Cell" }, function (data) {
			$("#SummarizeAs").empty();
			$.each(data, function (index, item) {
				$("#SummarizeAs").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
			});
		});
	});

	$("#WorkCenterID").on("change", function () {
		$("#SummarizeAs").empty();
	});
</script>

@*Used Graphs*@
@*guage New*@
<script>
	if ('@Session["Error"]' == "") {
		var OEEVal = '@ViewBag.Oee';
		var AvailVal = '@ViewBag.Aval';
		var PerfVal = '@ViewBag.Perf';
		var QualVal = '@ViewBag.Qual';
		//alert(QualVal)
		var chartGuageOEE = c3.generate({
			bindto: ".jchartGuageOEE",
			data: {
				columns: [
					['OEE%', OEEVal]
				],
				type: 'gauge',
			},
			size: {
				height: 150
			},
			label: {
				format: function (value, ratio) {
					return value;
				},
				show: false // to turn off the min/max labels.
			},
			//color: '#FF0000',
			color: {
				// pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
				pattern: ['#0000FF'], // the three color levels for the percentage values.
				threshold: {
					unit: 'value', // percentage is default
					max: 100, // 100 is default
					values: [100]
				}
			},
		});

		//To Load Data into chart on button click.
   @* $("#jLoadDynamic").click(function (e) {
		e.preventDefault();
		alert("blah")
		//var chart = $(".jchartGuageAvail");
		chartGuageOEE.load({
			columns: [['data', 90]],
		});
		// May come to aid
		//$('.c3').each(function () {
		//	var chart = $(this).data('c3-chart');
		//});

	})*@


		var chartGuageAvail = c3.generate({
			bindto: ".jchartGuageAvail",
			data: {
				columns: [
					['Availability%', AvailVal]
				],
				type: 'gauge',
			},
			size: {
				height: 150
			},
			label: {
				format: function (value, ratio) {
					return value;
				},
				show: false // to turn off the min/max labels.
			},
			//color: '#F97600',
			color: {
				// pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
				pattern: ['#F97650'], // the three color levels for the percentage values.
				threshold: {
					unit: 'value', // percentage is default
					max: 100, // 100 is default
					values: [100]
				}
			},
		});

		var chartGuagePerf = c3.generate({
			bindto: ".jchartGuagePerf",
			data: {
				columns: [
					['Performance%', PerfVal]
				],
				type: 'gauge',
			},
			size: {
				height: 150
			},
			label: {
				format: function (value, ratio) {
					return value;
				},
				show: false // to turn off the min/max labels.
			},
			//color: "yellow",
			color: {
				// pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
				pattern: ['#F6C600'], // the three color levels for the percentage values.
				threshold: {
					unit: 'value', // percentage is default
					max: 100, // 100 is default
					values: [100]
				}
			},

		});
		var chartGuageQual = c3.generate({
			bindto: ".jchartGuageQual",
			data: {
				columns: [
					['Quality%', QualVal]
				],
				type: 'gauge',
			},
			size: {
				height: 150
			},
			label: {
				format: function (value, ratio) {
					return value;
				},
				show: false // to turn off the min/max labels.
			},
			//color: '#60B044',
			color: {
				// pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
				pattern: ['#60B044'], // the three color levels for the percentage values.
				threshold: {
					unit: 'value', // percentage is default
					max: 100, // 100 is default
					values: [100]
				}
			},
		});
	}
</script>

@*level2OEEBarCharts Bars Colors *@
<script>
	if ('@Session["Error"]' == "") {
		if ('@ViewBag.lowestLevel' == "WorkCentre") {
			$(".jdynamicLossesElements").show();
			$(".OEEGuage").show();
			$(".OEEsubLevels").hide();
			$(".LossesSublevels").hide();
		}
		else if ('@ViewBag.lowestLevel' == "Cell") {
			$(".jdynamicLossesElements").show();
			$(".OEEGuage").show();
			$(".OEEsubLevels").show();
			$(".LossesSublevels").show();
		}
		else if ('@ViewBag.lowestLevel' == "Shop") {
			$(".jdynamicLossesElements").show();
			$(".OEEGuage").show();
			$(".OEEsubLevels").show();
			$(".LossesSublevels").show();
		}
		else {
			$(".OEEsubLevels").hide();
			$(".LossesSublevels").hide();
			$(".jdynamicLossesElements").hide();
			$(".OEEGuage").hide();
		};

	columnColorsOEE = ['#0000FF'];
	columnColorsAvail = ['#F97600'];
	columnColorsPerf = ['#F6C600'];
	columnColorsQual = ['#60B044'];
		// columnColors = ['#9a4d6f', '#c76c47', '#f85115', '#d9b099', '#d4ba2f'];
	function setColumnBarColors(colors, chartContainer) {
		$('#' + chartContainer + ' .c3-chart-bars .c3-shape').each(function (index) {
			this.style.cssText += 'fill: ' + colors[0] + ' !important; stroke: ' + colors[0] + '; !important';
			//this.style.cssText += 'fill: ' + colors[index] + ' !important; stroke: ' + colors[index] + '; !important';
		});
		$('#' + chartContainer + ' .c3-chart-texts .c3-text').each(function (index) {
			this.style.cssText += 'fill: ' + colors[0] + ' !important;';
		});
	}

	function setColumnBarColorsLosses(colors, chartContainer) {
		$('#' + chartContainer + ' .c3-chart-bars .c3-shape').each(function (index) {
			//this.style.cssText += 'fill: ' + colors[0] + ' !important; stroke: ' + colors[0] + '; !important';
			this.style.cssText += 'fill: ' + colors[index] + ' !important; stroke: ' + colors[index] + '; !important';
		});
		$('#' + chartContainer + ' .c3-chart-texts .c3-text').each(function (index) {
			this.style.cssText += 'fill: ' + colors[index] + ' !important;';
		});
	}

	var CellWiseWCOEEVals = '@CellWiseWCOEEVals';
	if (CellWiseWCOEEVals != "") {
		jsonObj = [];
		jsonObj.push('OEE');
		var arr = CellWiseWCOEEVals.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		CellWiseWCOEEVals = jsonObj;

		var CellWiseWCOEEWCNames = '@CellWiseWCOEEWCNames';
		jsonObj = [];
		var arr = CellWiseWCOEEWCNames.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		CellWiseWCOEEWCNames = jsonObj;

		var jchartBarOEE = c3.generate({
			bindto: '#designerChartLevel2OEE',
			data: {
				columns: [
				  CellWiseWCOEEVals
				],
				type: 'bar',
				labels: true,
			},
			axis: {
				x: {
					//label: {
					//    text: 'States',
					//    position: 'outer-center',
					//},
					rotated: true,
					type: 'category',
					categories: CellWiseWCOEEWCNames,
					tick: {
						centered: true,
						rotate: 90,
						multiline: false
					}
				},
				y: {
					label: {
						text: 'OEE (%)',
						position: 'outer-middle'
					},
					max: 110,
					min: 0,
					padding: {
						top: 0,
						bottom: 0
					}
				}
			},
			legend: {
				show: false
			}
		});

	}

	var CellWiseWCAvailVals = '@ViewData["CellWiseWCAvailVals"]';
		if (CellWiseWCAvailVals != "") {
			jsonObj = [];
			jsonObj.push('Avail');
			var arr = CellWiseWCAvailVals.split(',');
			arr.forEach(function (item) {
				jsonObj.push(item);
			});
			CellWiseWCAvailVals = jsonObj;

			var CellWiseWCAvailWCNames = '@ViewData["CellWiseWCAvailWCNames"]';
			jsonObj = [];
			var arr = CellWiseWCAvailWCNames.split(',');
			arr.forEach(function (item) {
				jsonObj.push(item);
			});
			CellWiseWCAvailWCNames = jsonObj;

			setColumnBarColors(columnColorsOEE, 'designerChartLevel2OEE');
			var jchartBarOEE = c3.generate({
				bindto: '#designerChartLevel2Avail',
				data: {
					columns: [
					  CellWiseWCAvailVals
					],
					type: 'bar',
					labels: true,
				},
				axis: {
					x: {
						//label: {
						//    text: 'States',
						//    position: 'outer-center',
						//},
						rotated: true,
						type: 'category',
						categories: CellWiseWCAvailWCNames,
						tick: {
							centered: true,
							rotate: 90,
							multiline: false
						}
					},
					y: {
						label: {
							text: 'Availability (%)',
							position: 'outer-middle'
						},
						max: 110,
						min: 0,
						padding: {
							top: 0,
							bottom: 0
						}
					}
				},
				legend: {
					show: false
				}
			});
			setColumnBarColors(columnColorsAvail, 'designerChartLevel2Avail');
		}


		var CellWiseWCPerfVals = '@ViewData["CellWiseWCPerfVals"]';
		if (CellWiseWCPerfVals != "") {
			jsonObj = [];
			jsonObj.push('Perf');
			var arr = CellWiseWCPerfVals.split(',');
			arr.forEach(function (item) {
				jsonObj.push(item);
			});
			CellWiseWCPerfVals = jsonObj;

			var CellWiseWCPerfWCNames = '@ViewData["CellWiseWCPerfWCNames"]';
			jsonObj = [];
			var arr = CellWiseWCPerfWCNames.split(',');
			arr.forEach(function (item) {
				jsonObj.push(item);
			});
			CellWiseWCPerfWCNames = jsonObj;

			var jchartBarOEE = c3.generate({
				bindto: '#designerChartLevel2Perf',
				data: {
					columns: [
					  CellWiseWCPerfVals
					],
					type: 'bar',
					labels: true,
				},
				axis: {
					x: {
						//label: {
						//    text: 'States',
						//    position: 'outer-center',
						//},
						rotated: true,
						type: 'category',
						categories: CellWiseWCPerfWCNames,
						tick: {
							centered: true,
							rotate: 90,
							multiline: false
						}
					},
					y: {
						label: {
							text: 'Performance (%)',
							position: 'outer-middle'
						},
						max: 110,
						min: 0,
						padding: {
							top: 0,
							bottom: 0
						}
					}
				},
				legend: {
					show: false
				}
			});
			setColumnBarColors(columnColorsPerf, 'designerChartLevel2Perf');
		}

		var CellWiseWCQualVals = '@ViewData["CellWiseWCQualVals"]';
		if (CellWiseWCQualVals != "") {
			jsonObj = [];
			jsonObj.push('Qual');
			var arr = CellWiseWCQualVals.split(',');
			arr.forEach(function (item) {
				jsonObj.push(item);
			});
			CellWiseWCQualVals = jsonObj;

			var CellWiseWCQualWCNames = '@ViewData["CellWiseWCQualWCNames"]';
			jsonObj = [];
			var arr = CellWiseWCQualWCNames.split(',');
			arr.forEach(function (item) {
				jsonObj.push(item);
			});
			CellWiseWCQualWCNames = jsonObj;

			var jchartBarOEE = c3.generate({
				bindto: '#designerChartLevel2Qual',
				data: {
					columns: [
					  CellWiseWCQualVals
					],
					type: 'bar',
					labels: true,
				},
				axis: {
					x: {
						//label: {
						//    text: 'Quality',
						//    position: 'outer-center',
						//},
						rotated: true,
						type: 'category',
						categories: CellWiseWCQualWCNames,
						tick: {
							centered: true,
							rotate: 90,
							multiline: false
						}
					},
					y: {
						label: {
							text: ' Quality (%)',
							position: 'outer-middle'
						},
						max: 110,
						min: 0,
						padding: {
							top: 0,
							bottom: 0
						}
					}
				},
				legend: {
					show: false
				}
			});
			setColumnBarColors(columnColorsAvail, 'designerChartLevel2Qual');
		}

		//##########################//Availability Loss For WCWise/CellWise/ShopWise OverAll

		var MaxValTemp = parseInt('@ViewBag.OverAllMax');
		var MaxVal = 50 + MaxValTemp;
		// alert(MaxVal)

		var CellWiseWCLossVals = '@ViewData["CellWiseWCLossVals"]';
		if (CellWiseWCLossVals == "") {
			CellWiseWCLossVals = '@ViewData["ShopWiseCellLossVals"]';
		}
		if (CellWiseWCLossVals != "") {
			jsonObj = [];
			jsonObj.push('OverAll Lossess');
			var arr = CellWiseWCLossVals.split(',');
			arr.forEach(function (item) {
				jsonObj.push(item);
			});
			CellWiseWCLossVals = jsonObj;

			var CellWiseWCLossNames = '@ViewData["CellWiseWCLossNames"]';
			if (CellWiseWCLossNames == "") {
				CellWiseWCLossNames = '@ViewData["ShopWiseCellLossNames"]';
			}
			jsonObj = [];
			var arr = CellWiseWCLossNames.split(',');
			arr.forEach(function (item) {
				jsonObj.push(item);
			});
			CellWiseWCLossNames = jsonObj;

			var jcolor = '@ViewData["CellWiseWCLossColors"]';
			if (jcolor == "") {
				jcolor = '@ViewData["ShopWiseCellLossColors"]';
			}
			jsonObj = [];
			var arr = jcolor.split(',');
			arr.forEach(function (item) {
				jsonObj.push(item);
			});
			jcolor = jsonObj;
			// alert(jcolor)
			var jchartBarOEE = c3.generate({
				bindto: '#CellWiseLossesOverAll',
				data: {
					columns: [
					  CellWiseWCLossVals
					],
					type: 'bar',
					labels: true,
					color: function (inColor, data) {
						var colors = jcolor;
						if (data.index !== undefined) {
							return colors[data.index];
						}
						return inColor;
					}
				},
				axis: {
					x: {
						//label: {
						//    text: 'Quality',
						//    position: 'outer-center',
						//},
						rotated: true,
						type: 'category',
						categories: CellWiseWCLossNames,
						tick: {
							centered: true,
							rotate: 90,
							multiline: false
						}
					},
					y: {
						label: {
							text: ' Availability Loss (Minutes)',
							position: 'outer-middle'
						},
						max: MaxVal,
						min: 0,
						padding: {
							top: 0,
							bottom: 0
						}
					}
				},
				legend: {
					show: false
				},
				//axis: {
				//    x: {
				//        label: 'WC Names'
				//    },
				//    y: {
				//        label: 'Loss(Minutes)'
				//    },
				//}
			});
			// setColumnBarColorsLosses(columnColors, 'CellWiseLossesOverAll');
		}
		// Color turns to original when window is resized
		// To handle that
		//$(window).resize(function () {
		//    setColumnBarColors(columnColorsOEE, 'designerChartLevel2Qual');
		//    setColumnBarColors(columnColorsAvail, 'designerChartLevel2Perf');
		//    setColumnBarColors(columnColorsPerf, 'designerChartLevel2Avail');
		//    setColumnBarColors(columnColorsAvail, 'designerChartLevel2OEE');
		//    //setColumnBarColorsLosses(columnColors, 'CellWiseLossesOverAll');
		//});
		//d3.selectAll("#designerChartLevel2Qual, #designerChartLevel2Perf, #designerChartLevel2Avail, #designerChartLevel2OEE").on("focusout", function(d) {
		//   // reset all the bars
		//    d3.selectAll("#designerChartLevel2Qual, #designerChartLevel2Perf, #designerChartLevel2Avail, #designerChartLevel2OEE .c3-shape").style("opacity", 1);
		//})
		//d3.selectAll("#designerChartLevel2Qual").on("click", function(d) {
		//    // reset all the bars
		//    d3.selectAll("#designerChartLevel2Qual .c3-shape").style("opacity", 1);
		//    alert("blah")
		//})
	}
	else {
		$(".jdynamicLossesElements").hide();
		$(".OEEGuage").hide();
		$(".OEEsubLevels").hide();
		$(".LossesSublevels").hide();
		alert('@Session["Error"]');
	}
</script>

@{
	if (Session["Error"] == "")
	{
		if (@ViewBag.lowestLevel == "Cell")
		{
			var GraphsCount = (int)ViewData["CellWiseWCCount"];
			var i = 0;
			for (i = 0; i < GraphsCount; i++)
			{

				<script type="text/javascript">
		var MaxValTemp = parseInt('@ViewBag.OverAllMax');
		var MaxVal = 25 + MaxValTemp;
		var CellWiseWCLossVals = '@ViewData["CellWiseWCLossVals" + cnt]';
		jsonObj = [];
		jsonObj.push('@ViewData["CellWiseWCLossValsMac" + cnt]');
		var arr = CellWiseWCLossVals.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		CellWiseWCLossVals = jsonObj;

		var CellWiseWCLossNames = '@ViewData["CellWiseWCLossNames" + cnt]';
					jsonObj = [];
					var arr = CellWiseWCLossNames.split(',');
					arr.forEach(function (item) {
						jsonObj.push(item);
					});
					CellWiseWCLossNames = jsonObj;
					//alert(CellWiseWCLossNames)
					var jcolor = '@ViewData["CellWiseWCLossColors" + cnt]';
								jsonObj = [];
								var arr = jcolor.split(',');
								arr.forEach(function (item) {
									jsonObj.push(item);
								});
								jcolor = jsonObj;
								//alert(jcolor)
								$(".jdynamicLossesElements1").append("<div id='chart10" + @i + "' class='jchartBarOEEDynamic" + @i + " chartLossNStuff' style='margin: 1%'></div>")
								var dynamicClassName = ".jchartBarOEEDynamic" + @i +"";
		var chartBarOEE = c3.generate({
			bindto: dynamicClassName,
			data: {
				columns: [
				  CellWiseWCLossVals
				],
				type: 'bar',
				labels: true,
				color: function (inColor, data) {
					var colors = jcolor;
					if (data.index !== undefined) {
						return colors[data.index];
					}
					return inColor;
				}
			},
			axis: {
				x: {
					rotated: true,
					type: 'category',
					categories: CellWiseWCLossNames,
					tick: {
						centered: true,
						rotate: 90,
						multiline: false
					}
				},
				y: {
					label: {
						text: ' Availability Loss (Minutes)',
						position: 'outer-middle'
					},
					max: MaxVal,
					min: 0,
					padding: {
						top: 0,
						bottom: 0
					}
				}
			},

		});
				</script>

				cnt++;
			}
		}
		else if (@ViewBag.lowestLevel == "Shop")
		{

			#region Code for OEE & Stuff : ShopWise , Show  for each Cell => Respective WC

			int CellsCount = Convert.ToInt32(@ViewData["ShopWiseCellCount"]);
			var h = 0;
			for (h = 0; h < CellsCount; h++)
			{
				//ShopWise Cell OEE & Stuff
				<script type="text/javascript">

		var ShopWiseCellOEEStuffVals = '@ViewData["ShopWiseCellOEEStuffVals" + h]';
		jsonObj = [];
		jsonObj.push('@ViewData["ShopWiseCellOEEStuffCell" + h]');
		var arr = ShopWiseCellOEEStuffVals.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		ShopWiseCellOEEStuffVals = jsonObj;
		//alert("ShopWiseCellOEEStuffVals" + ShopWiseCellOEEStuffVals)
		var ShopWiseCellOEEStuffNames = '@ViewData["ShopWiseCellOEEStuffNames" + h]';
		jsonObj = [];
		var arr = ShopWiseCellOEEStuffNames.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		ShopWiseCellOEEStuffNames = jsonObj;

		var jcolor = ['#0000FF', '#F97600', '#F6C600', '#60B044'];
		//jsonObj = [];
		//var arr = jcolor.split(',');
		//arr.forEach(function (item) {
		//    jsonObj.push(item);
		//});
		//jcolor = jsonObj;
		//alert(jcolor)
		$(".chartBarOEENStuffSubLevels").append("<div id='chart10Cell" + @h + "' class='jchartBarOEEDynamicCell" + @h + " chartOEENStuff' style='margin: 1%'></div>")
					var dynamicClassName = ".jchartBarOEEDynamicCell" + @h +"";
		var chartBarOEE = c3.generate({
			bindto: dynamicClassName,
			data: {
				columns: [
					ShopWiseCellOEEStuffVals
				],
				type: 'bar',
				labels: true,
				color: function (inColor, data) {
					var colors = jcolor;
					if (data.index !== undefined) {
						return colors[data.index];
					}
					return inColor;
				}
			},
			axis: {
				x: {
					rotated: true,
					type: 'category',
					categories: ShopWiseCellOEEStuffNames,
					tick: {
						centered: true,
						rotate: 90,
						multiline: false
					}
				},
				y: {
					label: {
						text: ' (%)',
						position: 'outer-middle'
					},
					max: 110,
					min: 0,
					padding: {
						top: 0,
						bottom: 0
					}
				}
			},
		});
				</script>

				var WCsCountInCell = (int)ViewData["CellWiseWCCount" + h + ""];
				var i = 0;
				for (i = 0; i < WCsCountInCell; i++)
				{
					Scnt = i;
					<script type="text/javascript">

		var CellWiseWCOEEStuffVals = "";
		CellWiseWCOEEStuffVals = '@ViewData["CellWiseWCOEEStuffVals" + @Scnt + ""]';
		jsonObj = [];
		jsonObj.push('@ViewData["CellWiseWCOEEStuffMac" + @Scnt + ""]');
		var arr = CellWiseWCOEEStuffVals.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		CellWiseWCOEEStuffVals = jsonObj;
		//alert('@ViewData["CellWiseWCOEEStuffVals" + @Scnt + ""]');
		//alert("CellWiseWCOEEStuffVals " + CellWiseWCOEEStuffVals);
		var CellWiseWCOEEStuffNames = '@ViewData["CellWiseWCOEEStuffNames" + @Scnt + ""]';
		jsonObj = [];
		var arr = CellWiseWCOEEStuffNames.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		CellWiseWCOEEStuffNames = jsonObj;

		var jcolor = ['#0000FF', '#F97600', '#F6C600', '#60B044'];

					@*var jcolor = '@ViewData["CellWiseWCLossColors" + @Scnt + ""]';
					jsonObj = [];
					var arr = jcolor.split(',');
					arr.forEach(function (item) {
						jsonObj.push(item);
					});
					jcolor = jsonObj;*@
		//alert(jcolor)
		$(".chartBarOEENStuffSubLevels").append("<div id='chart10" + @i + "' class='jchartBarOEEDynamic" + @i + " chartOEENStuff' style='margin: 1%'></div>")
		var dynamicClassName = ".jchartBarOEEDynamic" + @i +"";
		var chartBarOEE = c3.generate({
			bindto: dynamicClassName,
			data: {
				columns: [
					CellWiseWCOEEStuffVals
				],
				type: 'bar',
				labels: true,
				color: function (inColor, data) {
					var colors = jcolor;
					if (data.index !== undefined) {
						return colors[data.index];
					}
					return inColor;
				}
			},
			axis: {
				x: {
					rotated: true,
					type: 'category',
					categories: CellWiseWCOEEStuffNames,
					tick: {
						centered: true,
						rotate: 90,
						multiline: false
					}
				},
				y: {
					label: {
						text: '(%)',
						position: 'outer-middle'
					},
					max: 110,
					min: 0,
					padding: {
						top: 0,
						bottom: 0
					}
				}
			},
		});
					</script>
					// cnt++;
				}
			}
			#endregion


			#region Code for Losses: ShopWise , Show  for each Cell => Respective WC

			CellsCount = Convert.ToInt32(@ViewData["ShopWiseCellCount"]);
			h = 0;
			for (h = 0; h < CellsCount; h++)
			{
				Scnt = h;
				//ShopWise Cell Losses & Stuff
				<script type="text/javascript">
		var MaxValTemp = parseInt('@ViewBag.Max');
		var MaxVal = 50 + MaxValTemp;
		var ShopWiseCellLossVals = '@ViewData["ShopWiseCellLossVals" + Scnt + ""]';
		//alert(MaxVal + " " + '@ViewData["ShopWiseCellLossVals" + Scnt + ""]')
		jsonObj = [];
		jsonObj.push('@ViewData["ShopWiseCellLossValsCell" + Scnt + ""]');
		var arr = ShopWiseCellLossVals.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		ShopWiseCellLossVals = jsonObj;

		var ShopWiseCellLossNames = '@ViewData["ShopWiseCellLossNames" + +Scnt + ""]';
		jsonObj = [];
		var arr = ShopWiseCellLossNames.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		ShopWiseCellLossNames = jsonObj;
		// alert(CellWiseWCLossNames)
		var jcolor = '@ViewData["ShopWiseCellLossColors" + Scnt + ""]';
									jsonObj = [];
									var arr = jcolor.split(',');
									arr.forEach(function (item) {
										jsonObj.push(item);
									});

									jcolor = jsonObj;
									//alert(jcolor)
									$(".jdynamicLossesElements1").append("<div id='chart10Cell" + @h + "' class='jchartBarLossDynamicCell" + @h + " chartLossNStuff' style='margin: 1%'></div>")
									var dynamicClassName = ".jchartBarLossDynamicCell" + @h +"";
		// alert(dynamicClassName)
		var chartBarOEE = c3.generate({
			bindto: dynamicClassName,
			data: {
				columns: [
					ShopWiseCellLossVals
				],
				type: 'bar',
				labels: true,
				color: function (inColor, data) {
					var colors = jcolor;
					if (data.index !== undefined) {
						return colors[data.index];
					}
					return inColor;
				}
			},
			axis: {
				x: {
					rotated: true,
					type: 'category',
					categories: ShopWiseCellLossNames,
					tick: {
						centered: true,
						rotate: 90,
						multiline: false
					}
				},
				y: {
					label: {
						text: ' Availability Loss (Minutes)',
						position: 'outer-middle'
					},
					max: MaxVal,
					min: 0,
					padding: {
						top: 0,
						bottom: 0
					}
				}
			},
		});
				</script>

				var WCCountInCell = (int)ViewData["CellWiseWCCount" + h + ""];
				var i = 0;
				for (i = 0; i < WCCountInCell; i++)
				{
					<script type="text/javascript">
		var MaxValTemp = parseInt('@ViewBag.Max');
		var MaxVal = 25 + MaxValTemp;
		var CellWiseWCLossVals = '@ViewData["CellWiseWCLossVals" + i]';
		jsonObj = [];
		jsonObj.push('@ViewData["CellWiseWCLossValsMac" + i]');
		var arr = CellWiseWCLossVals.split(',');
		arr.forEach(function (item) {
			jsonObj.push(item);
		});
		CellWiseWCLossVals = jsonObj;

		var CellWiseWCLossNames = '@ViewData["CellWiseWCLossNames" + i]';
					jsonObj = [];
					var arr = CellWiseWCLossNames.split(',');
					arr.forEach(function (item) {
						jsonObj.push(item);
					});
					CellWiseWCLossNames = jsonObj;
					//alert(CellWiseWCLossNames)
					var jcolor = '@ViewData["CellWiseWCLossColors" + i]';
					jsonObj = [];
					var arr = jcolor.split(',');
					arr.forEach(function (item) {
						jsonObj.push(item);
					});
					jcolor = jsonObj;
					//alert(jcolor)
					$(".jdynamicLossesElements1").append("<div id='chart10" + @i + "' class='jchartBarLossDynamic" + @i + " chartLossNStuff' style='margin: 1%'></div>")
					var dynamicClassName = ".jchartBarLossDynamic" + @i +"";
		var chartBarOEE = c3.generate({
			bindto: dynamicClassName,
			data: {
				columns: [
					CellWiseWCLossVals
				],
				type: 'bar',
				labels: true,
				color: function (inColor, data) {
					var colors = jcolor;
					if (data.index !== undefined) {
						return colors[data.index];
					}
					return inColor;
				}
			},
			axis: {
				x: {
					rotated: true,
					type: 'category',
					categories: CellWiseWCLossNames,
					tick: {
						centered: true,
						rotate: 90,
						multiline: false
					}
				},
				y: {
					label: {
						text: ' Availability Loss (Minutes)',
						position: 'outer-middle'
					},
					max: MaxVal,
					min: 0,
					padding: {
						top: 0,
						bottom: 0
					}
				}
			},
		});
					</script>
					//cnt++;
				}
			}
			#endregion



		}

	}
}


